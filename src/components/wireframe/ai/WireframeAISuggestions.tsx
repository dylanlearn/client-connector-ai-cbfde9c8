
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { useWireframeStore } from '@/stores/wireframe-store';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { AlertTriangle, Loader2, Sparkles } from 'lucide-react';
import { v4 as uuidv4 } from 'uuid';

interface WireframeAISuggestionsProps {
  onClose: () => void;
}

const WireframeAISuggestions: React.FC<WireframeAISuggestionsProps> = ({ onClose }) => {
  const [prompt, setPrompt] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  const wireframe = useWireframeStore(state => state);
  const activeSection = wireframe.activeSection;
  const addSection = wireframe.addSection;
  const updateSection = wireframe.updateSection;
  
  const getActiveSectionData = () => {
    if (!activeSection) return null;
    return wireframe.sections.find(section => section.id === activeSection) || null;
  };
  
  const activeData = getActiveSectionData();
  
  const handleGenerateSuggestions = async () => {
    if (!prompt.trim()) {
      setError('Please enter a prompt to generate suggestions');
      return;
    }
    
    setIsGenerating(true);
    setError(null);
    
    try {
      // This is a placeholder for actual AI suggestion generation
      // In a real implementation, this would call an API endpoint
      
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const suggestedSection = {
        name: "AI Suggested Section",
        description: "This section was generated based on your prompt: " + prompt,
        sectionType: "hero",
        layoutType: "centered",
        components: [
          { type: "heading", content: "AI Generated Heading" },
          { type: "paragraph", content: "This is sample content generated by AI suggestions." }
        ]
      };
      
      // If we have an active section, update it with suggestions
      // Otherwise create a new section
      if (activeSection && activeData) {
        updateSection(activeSection, suggestedSection);
      } else {
        addSection({
          id: uuidv4(), // Add id to satisfy TypeScript
          name: suggestedSection.name || "AI Section",
          sectionType: suggestedSection.sectionType || "generic",
          description: suggestedSection.description,
          layoutType: suggestedSection.layoutType,
          components: suggestedSection.components
        });
      }
      
      // Close the dialog after successful generation
      onClose();
      
    } catch (err: any) {
      console.error('Error generating suggestions:', err);
      setError(err.message || 'Failed to generate suggestions');
    } finally {
      setIsGenerating(false);
    }
  };
  
  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Sparkles className="h-5 w-5" />
          AI Wireframe Suggestions
        </CardTitle>
      </CardHeader>
      
      <CardContent className="space-y-4">
        <div>
          <Label htmlFor="ai-prompt">What would you like to generate?</Label>
          <Textarea
            id="ai-prompt"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="Describe what you'd like to add or improve in your wireframe..."
            rows={4}
            className="mt-2"
          />
          <p className="text-xs text-muted-foreground mt-1">
            Example: "Create a hero section with a headline and call to action button" or "Suggest improvements for my current section"
          </p>
        </div>
        
        {error && (
          <div className="bg-destructive/10 text-destructive p-3 rounded-md flex items-start gap-2">
            <AlertTriangle className="h-5 w-5 flex-shrink-0 mt-0.5" />
            <p className="text-sm">{error}</p>
          </div>
        )}
        
        {activeSection && (
          <div className="bg-muted p-3 rounded-md">
            <p className="text-sm font-medium">Active section: {activeData?.name}</p>
            <p className="text-xs text-muted-foreground">
              AI suggestions will be applied to this section
            </p>
          </div>
        )}
      </CardContent>
      
      <CardFooter className="flex justify-end gap-2">
        <Button variant="outline" onClick={onClose}>
          Cancel
        </Button>
        
        <Button 
          onClick={handleGenerateSuggestions} 
          disabled={isGenerating || !prompt.trim()}
        >
          {isGenerating ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Generating...
            </>
          ) : (
            <>
              <Sparkles className="mr-2 h-4 w-4" />
              Generate Suggestions
            </>
          )}
        </Button>
      </CardFooter>
    </Card>
  );
};

export default WireframeAISuggestions;
